<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.thinkjoy.gaokao360.dao.ex.IUniversityEnrollingExDAO">
<!--
insert
update
updateNull
deleteById
deleteByCondition
deleteByProperty
fetch
findOne
findList
findAll
queryPage
like
queryList
queryOne
count
selectMaxId
updateOrSave
selectOne
selectList
-->

    <sql id="Base_Column_List">
           enrolling.id as id,
           university.areaid as areaid,
           province.name as province,
           university.name as name,
           enrolling.year as year,
           enrolling.batch as batch,
           enrolling.university_major_type as universityMajorType,
           enrolling.plan_enrolling_number as planEnrollingNumber,
           enrolling.real_enrolling_number as realEnrollingNumber,
           enrolling.length_of_schooling   as engthOfSchooling,
           enrolling.school_fee            as schoolFee,
           enrolling.highest_score         as highestScore,
           enrolling.highest_precedence   as highestPrecedence,
           enrolling.lowest_score          as lowestScore,
           enrolling.lowest_precedence    as lowestPrecedence,
           enrolling.average_score         as averageScore,
           enrolling.average_precedence   as averagePrecedence,
           batchdict.name   as batchname,
           typedict.name   as typename,
           enrolling.lastModDate as lastModDate

    </sql>

    <select id="queryPage" resultType="cn.thinkjoy.gaokao360.dto.UniversityEnrollingDTO">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        zgk_university_enrolling enrolling
        LEFT OUTER JOIN zgk_university university ON university.id=enrolling.university_id
        LEFT JOIN zgk_province province ON province.id=enrolling.areaid
        LEFT JOIN zgk_data_dict batchdict ON batchdict.dictId=enrolling.batch AND batchdict.type='MAJOR_BATCH'
        LEFT JOIN zgk_data_dict typedict ON typedict.dictId=enrolling.batch AND typedict.type='UNIVERSITY_MAJOR_TYPE'
        <where>
            <if test="condition.whereSql != null">
                and id in (#{condition.whereSql})
            </if>
            <if test="condition.queryparam!=null">
                AND
                (
                province.name  LIKE  #{condition.queryparam.data},
                OR batchdict.name  LIKE  #{condition.queryparam.data},
                OR typedict.name  LIKE  #{condition.queryparam.data},
                OR enrolling.year  LIKE  #{condition.queryparam.data},
                )
            </if>
            <if test="condition.enrollingyear!=null">
                ${condition.groupOp} ${condition.enrollingyear.field} ${condition.enrollingyear.op}  #{condition.enrollingyear.data}
            </if>
            <if test="condition.universityareaid!=null">
                ${condition.groupOp} ${condition.universityareaid.field} ${condition.universityareaid.op}  #{condition.universityareaid.data}
            </if>
        </where>
        ORDER BY  lastModDate DESC
        <if test="offset != null">
            limit ${offset}, ${rows}
        </if>
    </select>

    <select id="count" resultType="java.lang.Integer">
        SELECT count(enrolling.id)  FROM
        zgk_university_enrolling enrolling
        LEFT OUTER JOIN zgk_university university ON university.id=enrolling.university_id
        LEFT JOIN zgk_province province ON province.id=enrolling.areaid
        LEFT JOIN zgk_data_dict batchdict ON batchdict.dictId=enrolling.batch AND batchdict.type='MAJOR_BATCH'
        LEFT JOIN zgk_data_dict typedict ON typedict.dictId=enrolling.batch AND typedict.type='UNIVERSITY_MAJOR_TYPE'
       <where>
           <if test="queryparam!=null">
               AND
               (
               province.name  LIKE  #{queryparam.data},
               OR batchdict.name  LIKE  #{queryparam.data},
               OR typedict.name  LIKE  #{queryparam.data},
               OR enrolling.year  LIKE  #{queryparam.data},
               )
           </if>
           <if test="enrollingyear!=null">
               ${groupOp} ${enrollingyear.field} ${enrollingyear.op}  #{enrollingyear.data}
           </if>
           <if test="universityareaid!=null">
               ${groupOp} ${universityareaid.field} ${universityareaid.op}  #{universityareaid.data}
           </if>
       </where>
    </select>
    <select id="fetch" parameterType="java.lang.Long" resultType="UniversityEnrolling">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        zgk_university_enrolling enrolling
        LEFT OUTER JOIN zgk_university university ON university.id=enrolling.university_id
        LEFT JOIN zgk_province province ON province.id=enrolling.areaid
        LEFT JOIN zgk_data_dict batchdict ON batchdict.dictId=enrolling.batch AND batchdict.type='MAJOR_BATCH'
        LEFT JOIN zgk_data_dict typedict ON typedict.dictId=enrolling.batch AND typedict.type='UNIVERSITY_MAJOR_TYPE'
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            AND enrolling.id = #{id}
        </trim>
    </select>
    <update id="updateMap">
        UPDATE zgk_university_enrolling
        <trim prefix="SET" suffixOverrides=",">
            <if test="map.areaId!=null">
                areaId = #{map.areaId},
            </if>
            <if test="map.universityId!=null">
                university_id = #{map.universityId},
            </if>
            <if test="map.year!=null">
                year = #{map.year},
            </if>
            <if test="map.batch!=null">
                batch = #{map.batch},
            </if>
            <if test="map.universityMajorType!=null">
                university_major_type = #{map.universityMajorType},
            </if>
            <if test="map.planEnrollingNumber!=null">
                plan_enrolling_number = #{map.planEnrollingNumber},
            </if>
            <if test="map.realEnrollingNumber!=null">
                real_enrolling_number = #{map.realEnrollingNumber},
            </if>
            <if test="map.lengthOfSchooling!=null">
                length_of_schooling = #{map.lengthOfSchooling},
            </if>
            <if test="map.schoolFee!=null">
                school_fee = #{map.schoolFee},
            </if>
            <if test="map.highestScore!=null">
                highest_score = #{map.highestScore},
            </if>
            <if test="map.highestPrecedence!=null">
                highest_precedence = #{map.highestPrecedence},
            </if>
            <if test="map.lowestScore!=null">
                lowest_score = #{map.lowestScore},
            </if>
            <if test="map.lowestPrecedence!=null">
                lowest_precedence = #{map.lowestPrecedence},
            </if>
            <if test="map.averageScore!=null">
                average_score = #{map.averageScore},
            </if>
            <if test="map.averagePrecedence!=null">
                average_precedence = #{map.averagePrecedence},
            </if>
            <if test="map.createDate!=null">
                createDate = #{map.createDate},
            </if>
            <if test="map.creator!=null">
                creator = #{map.creator},
            </if>
            <if test="map.lastModDate!=null">
                lastModDate = #{map.lastModDate},
            </if>
            <if test="map.lastModifier!=null">
                lastModifier = #{map.lastModifier},
            </if>
            <if test="map.isDelete!=null">
                is_delete = #{map.isDelete},
            </if>
        </trim>
        WHERE
        id = #{map.id}
    </update>

</mapper>

